name: Lighthouse CI

on:
    push:
        branches: [main]
    workflow_dispatch:

env:
  NODE_VERSION: 22
  PNPM_VERSION: 10.11.1

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get PNPM store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache PNPM store
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Lighthouse CI
        run: pnpm install -g @lhci/cli@0.15.x

      - name: Run Lighthouse CI
        run: lhci autorun --upload.target=temporary-public-storage
        continue-on-error: true

      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            try {
              const resultsDir = '.lighthouseci';
              const files = fs
                .readdirSync(resultsDir)
                .filter(f => f.startsWith('lhr-') && f.endsWith('.json'));
              if (files.length === 0) {
                core.setOutput('comment', '‚ùå No Lighthouse results found');
                return;
              }
              const results = JSON.parse(
                fs.readFileSync(path.join(resultsDir, files[0]))
              );
              const { categories, audits } = results;
              const formatScore = score => {
                const percentage = Math.round(score * 100);
                const emoji =
                  percentage >= 90
                    ? 'üü¢'
                    : percentage >= 50
                    ? 'üü°'
                    : 'üî¥';
                return `${emoji} ${percentage}`;
              };
              const comment = `## üö¢ Lighthouse Results

| Category      | Score |
|---------------|-------|
| Performance   | ${formatScore(categories.performance.score)} |
| Accessibility | ${formatScore(categories.accessibility.score)} |
| Best Practices| ${formatScore(categories['best-practices'].score)} |
| SEO           | ${formatScore(categories.seo.score)} |

**Key Metrics:**
- First Contentful Paint: ${Math.round(
                audits['first-contentful-paint'].numericValue
              )}ms
- Largest Contentful Paint: ${Math.round(
                audits['largest-contentful-paint'].numericValue
              )}ms
- Cumulative Layout Shift: ${audits[
                'cumulative-layout-shift'
              ].numericValue.toFixed(3)}

_Tested URL: ${results.finalUrl}_`;
              core.setOutput('comment', comment);
            } catch (error) {
              console.error('Error processing Lighthouse results:', error);
              core.setOutput(
                'comment',
                '‚ùå Error processing Lighthouse results'
              );
            }